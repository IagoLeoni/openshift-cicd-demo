/**
 * Author: Leandro Beretta <lberetta@redhat.com>
 */

try {
    timeout(time: 10, unit: 'MINUTES') {

        node() {

            stage("Choose Version") {
                env.version = selectVersion("app", "DevSnapshot", "dev");
            }

            def newTag = "TestingCandidate-" + env.version

            openshiftTag alias: "false",
                    destStream: "app",
                    destTag: newTag,
                    destinationNamespace: "test",
                    namespace: "dev",
                    srcStream: "app",
                    srcTag: "DevSnapshot-" + env.version,
                    verbose: "true"

            stage("Deploy to TEST") {
                sh "oc patch dc app --patch '{\"spec\": { \"triggers\": [ { \"type\": \"ImageChange\", \"imageChangeParams\": { \"containerNames\": [ \"app\" ], \"from\": { \"kind\": \"ImageStreamTag\", \"namespace\": \"test\", \"name\": \"app:TestingCandidate-$version\"}}}]}}' -n test"

                openshiftDeploy depCfg: "app", namespace: "test"
            }

            stage("Integration Test") {
                // Complete this section with your actual integration tests

                newTag = "ProdReady-" + env.version

                openshiftTag alias: "false",
                        destStream: "app",
                        destTag: newTag,
                        destinationNamespace: "prod",
                        namespace: "test",
                        srcStream: "app",
                        srcTag: "TestingCandidate-" + env.version,
                        verbose: "false"
            }

            stage('Deploy to PROD?') {
                input "Deploy new version to PROD?"
            }

            stage("Deploy to PROD") {
                sh "oc patch dc app-green --patch '{\"spec\": { \"triggers\": [ { \"type\": \"ImageChange\", \"imageChangeParams\": { \"containerNames\": [ \"app-green\" ], \"from\": { \"kind\": \"ImageStreamTag\", \"namespace\": \"prod\", \"name\": \"app:ProdReady-$version\"}}}]}}' -n prod"

                openshiftDeploy depCfg: "app", namespace: "prod"
            }
        }
    }
} catch (err) {
    echo "Caught: ${err}"
    currentBuild.result = 'FAILURE'

    throw err
}

def getVersionFromPom(pom) {
    def matcher = readFile(pom) =~ '<version>(.+)</version>'
    matcher ? matcher[0][1] : null
}

def selectVersion(imageName, tagPrefix, namespace) {
    def selectedTag = ""

    sh "oc get istag -n ${namespace} --sort-by='{.metadata.name}'| grep ${imageName}| grep ${tagPrefix} | awk '{print \$1}' | awk -F ':' '{print \$2}' | awk -F '-' '{print \$2}' | tail -5 > tags"

    def tags = readFile("tags").trim()

    selectedTag = input message: "Choose version",
            parameters: [choice(choices: tags, description: '', name: 'Versions')]

    return selectedTag
}
